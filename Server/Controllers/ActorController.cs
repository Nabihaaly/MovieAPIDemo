using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MovieApiDemo.Data;
using MovieApiDemo.Models;
using MovieApiDemo.ViewModel;
using System.Linq;

namespace MovieApiDemo.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ActorController : ControllerBase
    {
        private readonly MovieDbContext _context;
        private readonly IMapper _mapper;
        public ActorController(MovieDbContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }

        [HttpGet]
        public IActionResult Get(int pageIndex = 0, int pageSize = 10)
        {
            BaseResponseModel response = new BaseResponseModel();

            try
            {
                var actorCount = _context.Actors.Count();
                var actorList =  _mapper.Map<List<ActorVM>>( _context.Actors.Skip(pageIndex * pageSize).Take(pageSize).ToList());

                response.Status = true;
                response.StatusMessage = "Showed all record";
                response.Data = new { actors = actorList, Count = actorCount };

                return Ok(response);

            }
            catch (Exception ex)
            {
                //TODO: dp logging exceptions (if smthn went wrong ask user time wgera masla)
                response.Status = false;
                response.StatusMessage = ex.Message;

                return BadRequest(response);
            }
        }

        [HttpGet("{id}")]
        public IActionResult GetActorById(int id)
        {
            BaseResponseModel response = new BaseResponseModel();

            try
            {
                var actor = _context.Actors.Where(x => x.Id == id).FirstOrDefault();
                if (actor == null)
                {
                    response.Status = false;
                    response.StatusMessage = "Record doesnt exist";
                    return BadRequest(response);
                }

                var responseDataa = _mapper.Map<ActorDetailsVM>(actor);
                responseDataa.movies = _context.Movies.Where(x => x.Actors.Contains(actor)).Select(x => x.Title).ToArray();

                response.Status = true;
                response.StatusMessage = "Showed all record";
                response.Data = responseDataa;

                return Ok(response);

            }
            catch (Exception ex)
            {
                //TODO: dp logging exceptions (if smthn went wrong ask user time wgera masla)
                response.Status = false;
                response.StatusMessage = ex.Message;

                return BadRequest(response);
            }
        }

        [HttpGet]
        [Route("Search/{searchText}")]
        public IActionResult Get( string searchText)
        {
            BaseResponseModel response = new BaseResponseModel();

            try
            {
                var searchedActor = _context.Actors.Where(x => x.Name.Contains(searchText))
                .Select(x => new
                {
                    x.Id,
                    x.Name
                }).ToList();

                response.Status = true;
                response.StatusMessage = "Success";
                response.Data =searchedActor;

                return Ok(response);
            }
            catch (Exception ex)
            {
                response.Status = false;
                response.StatusMessage = ex.Message;

                return BadRequest(response);
            }
        }

        [HttpPost]
        public IActionResult Post(ActorVM model)
        {
            BaseResponseModel response = new BaseResponseModel();

            try
            {
                if (ModelState.IsValid)
                {
                    var postedModel = _mapper.Map<Actor>(model);
                    _context.Actors.Add(postedModel);
                    _context.SaveChanges();

                    // After saving, postedModel.Id is auto-generated by the database.
                    model.Id = postedModel.Id;

                    response.Status = true;
                    response.StatusMessage = "created successfully ";
                    response.Data = model;

                    return Ok(response);
                }
                else
                {
                    response.Status = false;
                    response.StatusMessage = "not valid modelState";
                    response.Data = ModelState;

                    return BadRequest(response);
                }
            }
            catch (Exception ex)
            {
                response.Status = false;
                response.StatusMessage = ex.InnerException?.Message ?? ex.Message;

                return BadRequest(response);
            }
        }

        [HttpPut]
        public IActionResult Put(ActorVM model)
        {
            BaseResponseModel response = new BaseResponseModel();

            try
            {
                if (ModelState.IsValid)
                {
                    var postedModel = _mapper.Map<Actor>(model);

                    // check id is valid
                    if (model.Id <= 0)
                    {
                        response.Status = false;
                        response.StatusMessage = "not valid id";

                        return BadRequest(response);
                    }

                    var actorDetails = _context.Actors.Where( x=> x.Id == model.Id ).AsNoTracking().FirstOrDefault();

                    if (actorDetails == null)
                    {
                        response.Status = false;
                        response.StatusMessage = "no actor found";

                        return BadRequest(response);
                    }

                    _context.Actors.Update(postedModel);
                    _context.SaveChanges();

                    response.Status = true;
                    response.StatusMessage = "Updated successfully";
                    response.Data = postedModel;

                    return Ok(response);
                }
                else
                {
                    response.Status = false;
                    response.StatusMessage = "not valid modelState";
                    response.Data = ModelState;

                    return BadRequest(response);
                }
            }
            catch (Exception ex)
            {
                response.Status = false;
                response.StatusMessage = ex.Message;

                return BadRequest(response);
            }
        }
        [HttpDelete]
        public IActionResult Delete(int id)
        {
            BaseResponseModel response = new BaseResponseModel();

            try
            {

                var actor = _context.Actors.Where(x => x.Id == id).FirstOrDefault();
                if (actor == null)
                {
                    response.Status = false;
                    response.StatusMessage = "id not valid";
                    return BadRequest(response);
                }

                _context.Actors.Remove(actor);
                _context.SaveChanges();

                response.Status = true;
                response.StatusMessage = "deleted successfully";

                return Ok(response);
            }
            catch (Exception ex)
            {
                response.Status = false;
                response.StatusMessage = "smthn went wrong ";

                return BadRequest(response);

                throw;
            }
        }

    }
}

// auto mapper : frontend pe data as a viewnodel jayega wahnsy entity m ayega to ye map lrna hai, for that we need profiles 
// make class of mappingProfiles, inherit profiles.. resgister automapper as a service in  program.cs to use it in controller 
// services.AddAutoMapper(AddDomain.CurrentDomain.GetAssemblies())

// when we try to access tht file from tihs folder we wont be anble to access it useStatatic files jb root folder m hon appl folder m tb is middlware sy access krskty hain but when
// image isnt in appl folder(no one can access)... we need to conf that use static file middleware : app.UseStaticzFiles(new StaticFileOptions() 

// not god practise to store images iin root folder 
// CancellationToken write path in appSetting and cong here 